#+title: Org Mode Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ../emacs.d/org-mode.el

* Config and Hooks for Org Mode
** Setup lexial scoping needed by roam customizations

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

#+RESULTS:

** Org Font Setup

#+begin_src emacs-lisp

  (defun org-font-setup ()
    (setq org-hide-emphasis-markers t)

    ;; TODO this isn't working...
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil ;;:font "Cantarell"
                          :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

#+RESULTS:
: org-font-setup

** Main Org config

#+begin_src emacs-lisp

  (defun org-mode-setup ()
    (org-indent-mode))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-startup-folded 'content)
    (setq org-agenda-start-with-log-mode nil)
    (setq org-agenda-window-setup 'only-window)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (org-font-setup))

#+end_src

#+RESULTS:
: 60

** Org Mode Look and Feel

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
    (visual-line-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

#+RESULTS:

** Org Babel Config

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)
    (setq org-confirm-babel-evaluate nil))

#+end_src

#+RESULTS:

** Auto Tangle anything within Emacs Config Dir

#+begin_src emacs-lisp

  (if (string-equal system-name "SXM00164")
      (setq my/config-dir "c:/Users/jwassilak/AppData/Roaming/config/emacs.org/")
    (setq my/config-dir "/home/john/config/emacs.org/"))

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        my/config-dir)
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))

#+end_src

** Shortcuts to create Babel code blocks

Type =<= and the shortcut (ie =el=) and then =TAB=
#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Setup Roam

#+begin_src emacs-lisp

  (use-package org-roam
    :init
    (setq org-roam-v2-ack t) ;; hush message
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-directory
      (if (string-equal system-name "SXM00164")
        (file-truename "~/org/roam/")
        (file-truename "/mnt/crypt/john/org/roam/")))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :hook
    (after-init . org-roam-db-autosync-mode))

#+end_src

#+RESULTS:
: org-roam-node-insert

** Integrate roam and org-agenda

#+begin_src emacs-lisp

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Agenda")))

  (advice-add 'org-roam-db-sync :after 'my/org-roam-refresh-agenda-list)

#+end_src

#+RESULTS:
: my/org-roam-refresh-agenda-list

** Org export customization
#+begin_src emacs-lisp

  (setq org-latex-toc-command "\\tableofcontents \\clearpage")
  
#+end_src

#+RESULTS:
: \tableofcontents \clearpage
